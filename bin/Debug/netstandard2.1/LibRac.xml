<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LibRac</name>
    </assembly>
    <members>
        <member name="T:LibRac.Configurations.ConfigHandler">
            <summary>
            Provides methods for loading and saving configuration settings to and from a file.
            </summary>
        </member>
        <member name="M:LibRac.Configurations.ConfigHandler.LoadConfigurationFromFile(System.String)">
            <summary>
            Loads configuration settings from a specified file.
            </summary>
            <param name="fullFileName">The path to the configuration file from which to load settings.</param>
            <returns>
            A dictionary containing configuration settings if the file exists and is properly formatted;
            otherwise, null if the file does not exist or an error occurs during loading.
            </returns>
        </member>
        <member name="M:LibRac.Configurations.ConfigHandler.SaveConfigurationToFile(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Saves configuration settings to a specified file.
            </summary>
            <param name="dictionary">A dictionary containing the configuration settings to save.</param>
            <param name="fullFileName">The path to the configuration file where the settings should be saved.</param>
            <remarks>
            This method writes the configuration settings from the provided dictionary to the file specified by <paramref name="fullFileName"/>.
            If the file does not exist, it will be created; if it does exist, it will be overwritten.
            </remarks>
        </member>
        <member name="T:LibRac.Documents.DocumentHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:LibRac.Documents.DocumentHandler.ConvertXmlToJson(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Converts xml document to json 
            </summary>
            <param name="file"></param>
            <param name="filters">for example providing "xmlns" will exclude schemas headers at the start</param>
            <returns></returns>
        </member>
        <member name="T:LibRac.DotNet.DotNetHandler">
            <summary>
            Class for executing dll assembly
            </summary>
        </member>
        <member name="M:LibRac.DotNet.DotNetHandler.Run_ExecuteAssemblyAsync(System.String,System.String,System.Boolean,System.Boolean,System.Action)">
            <summary>
            Asynchronously executes an assembly with specified arguments and configuration, and invokes a callback upon completion.
            </summary>
            <param name="assemblyPath">The file path of the assembly to execute.</param>
            <param name="args">Optional arguments to pass to the assembly. Defaults to an empty string if no arguments are provided.</param>
            <param name="hideWindow">If set to true, the execution window is hidden; otherwise, it's visible.</param>
            <param name="runAsAdmin">If set to true, the assembly is executed with administrative privileges.</param>
            <param name="callback">An optional callback action to invoke when the process exits.</param>
            <returns>A task that represents the asynchronous operation.</returns>
            <remarks>
            The method sets up a process to run the specified assembly according to the given parameters and manages process output and error streams if <paramref name="hideWindow"/> is true.
            The process is disposed after execution completes, and the specified callback, if provided, is invoked.
            This method handles process output asynchronously and uses a TaskCompletionSource to await the process exit.
            </remarks>
        </member>
        <member name="M:LibRac.DotNet.DotNetHandler.Run_LaunchAssemblySimple(System.String,System.String,System.Action)">
            <summary>
            Starts a .NET assembly as an ongoing process, returns the Processes object for internal management, captures output and error streams, 
            and allows for an optional callback on process exit.
            </summary>
            <param name="assemblyPath">The path to the .NET assembly (.dll or .exe) to be executed.</param>
            <param name="args">Optional arguments to pass to the assembly. Defaults to an empty string if no arguments are provided.</param>
            <param name="callback">An optional callback action that is invoked when the process exits. Can be <c>null</c>, in which case no action is taken on 
            process exit.</param>
            <returns>The started <see cref="T:System.Diagnostics.Process"/> object, allowing the caller to control and monitor the process's execution and lifecycle.</returns>
        </member>
        <member name="M:LibRac.DotNet.DotNetHandler.Run_LaunchAssembly(System.String,System.String,System.Boolean,System.Boolean,System.String,System.Action)">
            <summary>
            Initiates a .NET assembly as a separate process with configurable window visibility and administrator privileges, returns process 
            ID and start time, supports asynchronous output/error stream capture, and ensures automatic process cleanup.
            </summary>
            <param name="assemblyPath">The path to the .NET assembly (.dll or .exe) to be executed.</param>
            <param name="args">Optional arguments to pass to the assembly. Defaults to an empty string if no arguments are provided.</param>
            <param name="hideWindow">Determines whether the window of the separate process should be hidden. Set to <c>false</c> to show the window and <c>true</c> to hide it, enabling asynchronous capture of output and error streams.</param>
            <param name="runAsAdmin">Specifies whether the process should be run with administrator privileges. Set to <c>true</c> to enable administrator mode.</param>
            <param name="infoSaveLocation">Optional. The file path where the process information (e.g., process ID and start time) will be saved. If left empty, the information is not saved.</param>
            <param name="callback">An optional callback action to invoke when the process exits.</param>
            <returns>An array containing the process ID and start time as strings. The first element is the process ID, and the second element is the start time.</returns>
        </member>
        <member name="T:LibRac.Files.FileHandler">
            <summary>
            Library for dealing with files
            </summary>
        </member>
        <member name="M:LibRac.Files.FileHandler.ApplyReadOnlyToDirectory(System.String)">
            <summary>
            Sets the ReadOnly attribute to all files in the specified directory and its subdirectories.
            </summary>
            <param name="directoryPath">The path to the directory.</param>
        </member>
        <member name="M:LibRac.Files.FileHandler.RemoveReadOnlyFromDirectory(System.String)">
            <summary>
            Removes the ReadOnly attribute from all files in the specified directory and its subdirectories.
            </summary>
            <param name="directoryPath">The path to the directory.</param>
        </member>
        <member name="M:LibRac.Files.FileHandler.CopyFileTo(System.String,System.String,System.Boolean)">
            <summary>
            Copies a file to a specified destination, with an option to overwrite the existing destination file.
            </summary>
            <param name="fileFullName">The full path of the file to copy.</param>
            <param name="destinationFullName">The full path of the destination where the file will be copied.</param>
            <param name="overwrite">A boolean indicating whether to overwrite the destination file if it already exists.</param>
            <remarks>
            If the source file does not exist, the method returns without performing any action.
            The method attempts to copy the file and will overwrite the destination if the 'overwrite' parameter is true.
            This method prints to the console whether the file was copied successfully or if an error occurred.
            </remarks>
        </member>
        <member name="M:LibRac.Files.FileHandler.MoveFileTo(System.String,System.String,System.Boolean)">
            <summary>
            Moves a file to a specified destination, optionally overwriting the destination file.
            </summary>
            <param name="fileFullName">The full path of the file to move.</param>
            <param name="destinationFullName">The full path of the destination where the file will be moved.</param>
            <param name="overwrite">A boolean indicating whether to overwrite the destination file if it already exists.</param>
            <remarks>
            If the source file does not exist, the method returns without performing any action. 
            If the 'overwrite' parameter is true and the destination file exists, the destination file will be deleted prior to moving.
            This method prints to the console whether the file was moved successfully or if an error occurred.
            </remarks>
        </member>
        <member name="M:LibRac.Files.FileHandler.FindAndCopyFileToWorkingDirectory(System.String,System.String,System.Reflection.Assembly,System.Boolean)">
            <summary>
            Locates a specified file within a given path and copies it to the working directory. If the file is not found in the specified path, 
            the search will proceed up the directory tree recursively. The search is optionally  limited to a directory named after the executing assembly.
            </summary>
            <param name="startPath">The directory path where the file search begins.</param>
            <param name="fileName">The name of the file to search for and copy.</param>
            <param name="assembly">Optional: The current executing assembly. This will limit search at the root folder of the assembly. Default is null</param>
            <param name="overwrite">Optional: If set to false and file exist in working directory it will not overwrite stated file. Default is false</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LibRac.Files.FileHandler.FindAssemblyDirectory(System.String,System.Reflection.Assembly)" -->
        <member name="M:LibRac.Files.FileHandler.ParsePathToExcludeFile(System.String)">
            <summary>
            Parses a given file or directory path and returns the directory path excluding the file name. If the input is already a directory path, it returns the same.
            </summary>
            <param name="path">The file or directory path to parse.</param>
            <returns>The directory part of the path if the path is a file, the original path if it is a directory, or an error message if neither.</returns>
            <exception cref="T:System.Exception">Thrown when the provided path is neither a valid file nor a directory.</exception>
        </member>
        <member name="M:LibRac.Files.FileHandler.GetTotalFilesInDirectory(System.String,System.String[])">
            <summary>
            Calculates the total number of files within a specified directory and all its subdirectories, excluding files that match any of the provided patterns.
            </summary>
            <param name="directoryPath">The path of the directory to search within.</param>
            <param name="filesToExclude">An array of filenames or extensions to exclude from the count.</param>
            <returns>The total number of files in the directory after excluding specified files.</returns>
        </member>
        <member name="M:LibRac.Files.FileHandler.DeleteAllContent(System.String,System.String[])">
            <summary>
            Deletes all files and directories within the specified folder path, except for those specified in the excluded list. 
            </summary>
            <param name="folderPath">The path of the folder from which to delete content.</param>
            <param name="excluded">Files and directories to exclude from deletion.</param>
            <returns>A list of log entries indicating the deletion status of each file and directory; or null if the directory does not exist.</returns>
            <remarks>
            This method logs every delete operation, whether successful or failed, and returns these logs. 
            It continues deletion even if some deletions fail, logging each failure.
            </remarks>
        </member>
        <member name="T:LibRac.Pipelines.PipeClient">
            <summary>
            Manages client-side operations for named pipe communication.
            </summary>
        </member>
        <member name="M:LibRac.Pipelines.PipeClient.#ctor(System.String,System.Action{System.String},System.Int32)">
            <summary>
            Initializes a new instance of the PipeClient class, connects to the server,
            and prepares for sending messages.
            </summary>
            <param name="pipeName">The name of the pipe to connect to.</param>
            <param name="logger">An action delegate to log messages.</param>
            <param name="timeoutInMils">The timeout in milliseconds for connecting to the server.</param>
            <remarks>
            This constructor attempts to connect to the named pipe server and initializes a StreamWriter
            for sending messages if the connection is successful. 
            <para><c>!!! The class should be used within an 'using' statement to ensure proper disposal of resources 
            or call Dispose() manually !!!</c>></para>
            </remarks>
        </member>
        <member name="M:LibRac.Pipelines.PipeClient.SendMessageAsync(System.String)">
            <summary>
            Sends a message to the connected pipe server.
            </summary>
            <param name="message">The message to send to the server.</param>
            <remarks>
            This method writes a message to the server using a StreamWriter. If the client is not connected,
            a log message is generated. It handles any exceptions that might occur during the message sending process.
            </remarks>
        </member>
        <member name="M:LibRac.Pipelines.PipeClient.Dispose">
            <summary>
            Releases all resources used by the PipeClient.
            </summary>
            <remarks>
            This method disposes of the StreamWriter and the NamedPipeClientStream, ensuring no resource leaks.
            Always use this class within a 'using' statement to guarantee that resources are properly cleaned up.
            </remarks>
        </member>
        <member name="M:LibRac.Pipelines.PipeServerBuilder.Build_OneTime(System.Action{System.String},System.String,System.Int32)">
            <summary>
            Listens for a single client connection and handles incoming messages. If <paramref name="timeoutInMils"/> is not -1 
            (Timeout.Infinite), the server waits for a connection until the timeout is reached. If a client connects within the timeout, 
            messages are processed until the client disconnects. If no client connects within the timeout, the server logs a timeout 
            message and exits the listen operation. Does not repeat listening after timeout.
            <para>Intended for use with a corresponding <see cref="T:LibRac.Pipelines.PipeClient"/> on the client side.</para>
            </summary>
            <param name="timeoutInMils">The timeout in milliseconds for waiting for a client connection.</param>
            <returns>A task representing the asynchronous server listening and message handling operation.</returns>
        </member>
        <member name="M:LibRac.Pipelines.PipeServerBuilder.Build_Sustained(System.Action{System.String},System.String,System.Int32,System.UInt32)">
            <summary>
            Listens for client connections and handles incoming messages. If parameters are default server will indefinitely wait 
            for connection. If <paramref name="timeoutInMils"/> is not -1 (Timeout.Infinite), it will wait for connection, disconnect 
            on timeout and repeat. Server will be closed after <paramref name="retryLimit"/> is reached and no connection is established.
            <para>Intended for use with a corresponding <see cref="T:LibRac.Pipelines.PipeClient"/> on the client side.</para>
            </summary>
            <param name="timeoutInMils">The timeout in milliseconds for waiting for a client connection.</param>
            <param name="retryLimit">The amount of retries when trying to establish connection</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:LibRac.Pipelines.PipeServerBuilder.Build_FixedConnections(System.Action{System.String},System.String,System.Int32,System.UInt32)">
            <summary>
            Listens for client connections and handles incoming messages. Only allows Set amount of connections as defined in <paramref name="connectionLimit"/>. 
            If parameters are default server will indefinitely wait for connection. If <paramref name="timeoutInMils"/> is set it will wait for connection, disconnect 
            on timeout and repeat.
            <para>Intended for use with a corresponding <see cref="T:LibRac.Pipelines.PipeClient"/> on the client side.</para>
            </summary>
            <param name="timeoutInMils">The timeout in milliseconds for waiting for a client connection.</param>
            <param name="connectionLimit">The amount of concurrent connections allowed</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:LibRac.Processes.ProcessHandler">
            <summary>
            Class for closing processes
            </summary>
        </member>
        <member name="M:LibRac.Processes.ProcessHandler.Kill_Process_ByName_FastUnsafe(System.String[])">
            <summary>
            Generates a PowerShell command to forcefully terminate processes by name, allowing for inclusion (name matches) and exclusion (name does not match prefixed with "!") criteria. 
            After Runs a PowerShell script and executes said command. It will kill all processes which respect naming conditions
            <param name="args">strings which will determining correct processes to terminate</param>
            <para>
            Example of arguments: ("test", "gui", "!production") will generate a script that kills all processes that contain "test" and/or "gui" but do not contain "production"
            </para>
            </summary> 
        </member>
        <member name="M:LibRac.Processes.ProcessHandler.Kill_Process_ByName(System.Boolean,System.String[])">
            <summary>
            Generates a PowerShell command to forcefully terminate processes by name, allowing for inclusion (name matches) and exclusion (name does not match prefixed with "!") criteria. 
            After Runs a PowerShell script and executes said command. It will kill all processes which respect naming conditions
            <param name="limitScopeToCurrentUser">Will only terminate the processes owned by current user. Default = true</param>
            <param name="args">strings which will determining correct processes to terminate</param>
            <para>
            Example of arguments: ("test", "gui", "!production") will generate a script that kills all processes that contain "test" and/or "gui" but do not contain "production"
            </para>
            </summary> 
        </member>
        <member name="M:LibRac.Processes.ProcessHandler.Kill_Process_ByPIDAndTimeCreated(System.String)">
            <summary>
            Will search trough all opened processes and kill a process with PID and TimeCreated saved in <paramref name="fullFileName"/> .txt file if processs has same 
            PID and TimeCreated
            </summary>
        </member>
        <member name="M:LibRac.Processes.ProcessHandler.SaveProcessInfo(System.Diagnostics.Process,System.String)">
            <summary>
            Saves the ID and start time of a specified process to a file.
            </summary>
            <param name="process">The process whose information is to be saved.</param>
            <param name="fullFileName">The full path and name of the file where the process information will be saved.</param>
            <remarks>
            If the provided filename is null or empty, the method will exit without performing any action.
            The process ID and start time are saved in the format "ID|Start Time".
            </remarks>
        </member>
        <member name="M:LibRac.Processes.ProcessHandler.Kill_DotNetProcess_ByFullNameFilter(System.String)">
            <summary>
            Terminates .NET processes whose full name or command line (full name of executing process) contains a specified filter string.
            </summary>
            <param name="filter">A string filter used to match against the process's full name or command line. 
            Only processes that contain this string in their full name or command line will be terminated.</param>
        </member>
        <member name="M:LibRac.Processes.ProcessHandler.Kill_Process_ByFullNameFilter(System.String,System.Boolean)">
            <summary>
            Terminates processes whose full name or command line (full name of executing process) contains a specified filter string and are owned by the current user.
            </summary>
            <param name="filter">Terminates process which full name contain filter parameter. For example, it can be a folder where .exe or process name</param>
            <param name="limitScopeToCurrentUser">Will only terminate the processes owned by current user. Default = true</param>
            <remarks>
            This method uses Windows Management Instrumentation (WMI) to query active processes and matches the command line of each process against the provided filter. 
            It ensures that only processes owned by the current user are targeted for termination, minimizing the risk of affecting system or other user's processes.
            </remarks>
        </member>
        <member name="M:LibRac.Processes.ProcessHandler.Kill_Process_ByTcpPortListened(System.Int32[])">
            <summary>
            Terminates all processes that are listening on the specified TCP ports.
            </summary>
            <param name="ports">An array of integers representing the TCP ports. Processes listening on any of these ports will be terminated.</param>
            <remarks>
            This method uses the TCP connections from the local machine to identify and terminate processes based on the ports they are listening on. It 
            checks each connection to see if its local port is contained in the provided list of ports, and if so, attempts to terminate the associated process.
            </remarks>
        </member>
        <member name="T:LibRac.Shell.ShellExecutor">
            <summary>
            Class for running async scripts in PowerShell
            </summary>
        </member>
        <member name="M:LibRac.Shell.ShellExecutor.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:LibRac.Shell.ShellExecutor.#ctor(System.Text.StringBuilder)">
            <summary>
            
            </summary>
        </member>
        <member name="M:LibRac.Shell.ShellExecutor.#ctor(System.Action{System.String})">
            <summary>
            
            </summary>
        </member>
        <member name="M:LibRac.Shell.ShellExecutor.ExecuteAsync(System.String,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Executes a PowerShell command and returns its output.
            </summary>
            <param name="command">The PowerShell command to execute.</param>
            <param name="workingDir">The working directory in which to run the command.</param>
            <param name="visible">Determines whether the process should be visible (default: true).</param>
            <param name="asAdmin">Specifies whether the process should be run with administrative privileges (default: true).</param>
            <param name="timeoutInMills">The timeout in milliseconds before forcefully terminating the process (-1 for infinite wait).</param>
            <returns>A task that with command output as a string.</returns>
        </member>
        <member name="M:LibRac.Shell.ShellExecutor.ExecuteAsAJobAsync(System.String,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Executes a PowerShell command as a background job and waits for completion.
            </summary>
            <param name="command">The PowerShell command to execute.</param>
            <param name="workingDir">The working directory in which to run the command.</param>
            <param name="visible">Determines whether the process should be visible (default: true).</param>
            <param name="asAdmin">Specifies whether the process should be run with administrative privileges (default: true).</param>
            <param name="timeoutInMills">The timeout in milliseconds before forcefully terminating the process (-1 for infinite wait).</param>
            <returns>A task that with command output as a string.</returns>
        </member>
        <member name="T:LibRac.Text.TextHandler">
            <summary>
            Text manipulation 
            </summary>
        </member>
        <member name="M:LibRac.Text.TextHandler.BreakRawTextIntoLines(System.String,System.Int32)">
            <summary>
            Breaks a given text into a list of strings, where each string represents a line of text 
            up to a specified maximum length. This method handles word wrapping without breaking words.
            </summary>
            <param name="text">The input text to be broken into lines.</param>
            <param name="lineLength">The maximum length of each line.</param>
            <returns>A list of strings, each representing a line of the specified maximum length.</returns>
        </member>
        <member name="M:LibRac.Text.TextHandler.SplitTextIntoNotEmptyLines(System.String)">
            <summary>
            Splits the given text into lines, excluding any empty lines. This method is useful for preprocessing text to remove irrelevant whitespace lines. Will not work correctly if text doesn't have line breaks
            </summary>
            <param name="text">The text to split into non-empty lines.</param>
            <returns>An array of strings, each representing a non-empty line from the original text.</returns>
        </member>
        <member name="M:LibRac.Text.TextHandler.SplitTextIntoLines(System.String)">
            <summary>
            Splits the given text into lines. Will not work correctly if text doesn't have line breaks
            </summary>
            <param name="text">The text to split into lines.</param>
            <returns>An array of strings, each representing a line from the original text.</returns>
        </member>
        <member name="M:LibRac.Text.TextHandler.GetLineDifferences(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Calculates the differences between two texts by comparing their lines. This method converts the texts into non-empty lines and then determines the differences.
            </summary>
            <param name="oldText">The original text to compare.</param>
            <param name="newText">The new text to compare.</param>
            <param name="threshold">The number of consecutive matching lines that need to be found before stopping the comparison. Default is 1</param>
            <param name="allowEmptyLines">Specifies whether empty lines should be included in the comparison. When set to true, all lines are considered; when false, empty lines are ignored. Default is false</param>
            <returns>An array of strings containing the lines that differ between the two texts, up to the specified threshold.</returns>
        </member>
        <member name="M:LibRac.Text.TextHandler.GetLineDifferences(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Boolean)">
            <summary>
            Calculates the line differences between two sets of text lines. This method is used internally to compare arrays of lines.
            </summary>
            <param name="oldText">An enumerable of strings representing the lines of the original text.</param>
            <param name="newText">An enumerable of strings representing the lines of the new text.</param>
            <param name="threshold">The number of consecutive matching lines that need to be found before stopping the comparison. Default is 1</param>
            <param name="allowEmptyLines">Specifies whether empty lines should be included in the comparison. When set to true, all lines are considered; when false, empty lines are ignored. Default is false</param>
            <returns>An array of strings containing the lines that differ, considering the specified threshold.</returns>
        </member>
    </members>
</doc>
